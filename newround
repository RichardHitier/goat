#! /usr/bin/perl -w

# This script parses a pairing file from Gotha (cut and paste
# from a PDF output) and updates a Data::Dumper Tournament tree.

# This is now deprecated as Goat include its own pairing
# engine. See 'pair'.

use strict;
use locale;
use Data::Dumper;
use FFGPlayer;
use GoGame;
use Round;
use Tournament;

use Getopt::Long;
use Pod::Usage;

=head1 NAME

newround -- Import Gotha pairings as a new round

=head1 THIS COMMAND IS DEPRECATED!

B<Goat> now includes its own pairing enging. Please refer to
B<pair>. This script is left here for historical reasons,
just in case someone wants to use it as a model, but it is
no longer tested nor maintained.

=head1 SYNOPSIS

newround --file <tournament file> -p <gotha pairing file>

(where gotha pairing file is produced by:
getting Gotha to print the pairings to PDF,
select all (ctrl-a) in Acrobat and save to disk,
(? not necessary: change charset to utf8 (iconv -f latin1 -t utf8).)

Or:
getting OpenGotha to print to postscript,
convert to text using pstotext (apt-get install pstotext)
)

=cut

#################################################################################
# Command line options
my $tournament_fn;
my $pairing_fn;

GetOptions(
    'file=s' => \$tournament_fn,
    'pairs=s' => \$pairing_fn,
) or die pod2usage();

die "No tournament file specified\n" unless $tournament_fn;
#################################################################################
my $tournament = Tournament->load($tournament_fn);

my @players = $tournament->players;


sub get_player {
    my ($name) = @_;

    my @res;
    # This wont work for homonymes
    foreach my $p (@players) {
        my @tests = ($p->familyname, $p->givenname);
        if (grep /\b$name\b/i, @tests) {
            push @res, $p;
        }
    }
    die "$name has multiple matches:\n",
       (join "\n", map {$_->givenname} @res),"\n" if (@res > 1);
    die "$name has no match (player not registered?)\n" if (@res == 0);
    return shift @res;
}

my @pairs;
my @used_players; # Keep track of all the players we've paired
my $round_num;

open my $pairs, "$pairing_fn" or die "$pairing_fn: $!\n";
#binmode $pairs, ':utf8';
while (<$pairs>) {
    if (/^\s*(?:Ronde|Round) (\d+)/) {
        $round_num = $1;
        die "Round $round_num already exists\n" if defined $tournament->Round->[$round_num];
        $tournament->add_round($round_num, Round->new($round_num));
        next;
    }
    (warn "Ignoring: $_\n"), next unless 
        /^\s*\d+\s+         # line number
        (\S+)\s+         # First player familyname
        (\S+)\s*         # First player givenname
        \((\d+[kd]).*?\)\s+ # First player level (2d, 3k, etc)
        (\S+)\s+         # Second player familyname
        (\S+)\s*         # Second player givenname
        \((\d+[kd]).*?\)\s+ # Second player level
        (\d+)            # Handicap
        /xi;

    die "Round number not found yet\n" unless defined $round_num;
    my ($name1, $fname1, $reg1, $name2, $fname2, $reg2, $handi) = ("\U$1", $2, $3, "\U$4", $5, $6, $7);

    my $p_white = get_player $name1;
    my $p_black = get_player $name2;

    warn $p_white->familyname.",".$reg1."\t".
    $p_black->familyname.",".$reg2."\t".
    " handi $handi\n";

    $p_white->register_level($round_num, $reg1);
    $p_black->register_level($round_num, $reg2);

    my $g = new GoGame $p_black, $p_white, $handi;
    push @used_players, $p_black, $p_white;
    $tournament->Round->[$round_num]->add_game($g);
}

#warn "Registered players:\n", (map {$_->fulladdress."\n"} @players);
#warn "\nPaired players:\n", (map {$_->fulladdress.  "\n"} @used_players);
warn "\nPlayer not paired: ", 
    map { $_->fulladdress."\n" } 
    grep { 
        ! ${{map { $_ => 1 } @used_players}}{$_} 
    } @players;

$tournament->save($tournament_fn);

